# openMC geometry script generated by GEOUNED
import openmc

###############################################################################
# Define problem geometry
###############################################################################


# Surface setup
S1 = openmc.XPlane(x0=-1.1100000000000002e-16)
S2 = openmc.YPlane(y0=2.0)
S3 = openmc.ZTorus(x0=0.0,y0=2.0,z0=0.0,r=1.0,r1=0.30000000000000004,r2=0.30000000000000004)
S4 = openmc.ZTorus(x0=0.0,y0=2.0,z0=0.0,r=1.0,r1=0.2,r2=0.2)
S5 = openmc.YPlane(y0=-1.0)
S6 = openmc.YPlane(y0=0.0)
S7 = openmc.YCylinder(x0=1.0,z0=0.0,r=0.30000000000000004)
S8 = openmc.YCylinder(x0=1.0,z0=0.0,r=0.2)
S9 = openmc.YPlane(y0=3.0)
S10 = openmc.YCylinder(x0=-1.0,z0=0.0,r=0.30000000000000004)
S11 = openmc.YCylinder(x0=-1.0,z0=0.0,r=0.2)
S12 = openmc.ZTorus(x0=0.0,y0=0.0,z0=0.0,r=1.0,r1=0.30000000000000004,r2=0.30000000000000004)
S13 = openmc.ZTorus(x0=0.0,y0=0.0,z0=0.0,r=1.0,r1=0.2,r2=0.2)
S14 = openmc.Plane(a=-0.7071067811865109,b=-0.7071067811865841,c=0.0,d=-1.4142135623731684)
S15 = openmc.Plane(a=0.7071067811868033,b=0.7071067811862918,c=-0.0,d=0.0)
S16 = openmc.XPlane(x0=-2.407109860380112)
S17 = openmc.XPlane(x0=2.407109860380112)
S18 = openmc.YPlane(y0=-2.0)
S19 = openmc.YPlane(y0=4.0)
S20 = openmc.ZPlane(z0=-1.3)
S21 = openmc.ZPlane(z0=1.3)
S22 = openmc.Sphere(x0=0.0,y0=1.0,z0=0.0,r=4.141272590193588, boundary_type="vacuum")

# Cell definition 
C1 = openmc.Cell(name="", region=((-S1 & +S4 & +S14 & -S3 & -S2)))
C2 = openmc.Cell(name="", region=((+S8 & -S7 & +S5 & -S6)))
C3 = openmc.Cell(name="", region=((-S9 & +S2 & +S11 & -S10)))
C4 = openmc.Cell(name="", region=((+S13 & +S15 & -S12 & +S6 & +S1)))
C5 = openmc.Cell(name="Automatic Generated Void Cell. Enclosure(-2.407, 2.407, -2.000, 4.000, -1.300, 1.300). Enclosed cells : (1, 2, 3, 4)", region=(+S16 & -S17 & +S18 & -S19 & +S20 & -S21 & ((-S8 | +S7 | -S5 | +S6) & (-S11 | +S10 | +S9 | -S2) & (-S14 | -S4 | +S3 | +S1 | +S2) & (-S15 | -S13 | +S12 | -S6 | -S1))))
C6 = openmc.Cell(name="", region=(-S22 & (-S16 | +S17 | -S18 | +S19 | -S20 | +S21)))

geometry = openmc.Geometry([C1, C2, C3, C4, C5, C6])
geometry.export_to_xml()
